__author__ = "Christopher Sweet - crs4263@rit.edu"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Octacrypt - Octacrypt provides a discrete 8 bit
" encryption system. Keys can be generated by the user
" and must be matched at the time of encryption and
" decryption.
" CS_proto : key[0] = Char Rotations
"            key[0:3] = Bit Rotations per Char
"            key[4:8] = Directional Rotation Bits
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

def ror(value, shift):
    """
    Right Rotates the value by the amount specified in shift
    :param value: ASCII Value
    :param shift: Shift Amount [0,7]
    :return: Binary Shifted value
    """
    value = ord(value)
    shiftOut = value & (2**shift-1)
    return (value >> shift | (shiftOut << 8 - shift)) & 0xff

def rol(value, shift):
    """
    Left Rotate the value by the amount specified in shift
    :param value: ASCII Value
    :param shift: Shift Amount [0,7]
    :return: Binary Shifted value:param value:
    """
    value = ord(value)
    shiftOut = (value & ((2**shift-1) << 8-shift)) >> (8 - shift)
    return ((value << shift) | shiftOut) & 0xff

def parsekey(key):
    """
    Parses the key assuming CS_proto standard
    :param key: 8 digit key to parse
    :return: masterbit, rotation bits, and dirction bits
    """
    mb = int(key[0])
    rb = [int(key[x]) for x in range(0,4)]
    db = [int(key[y]) for y in range(4,8)]
    return mb,rb,db

def encrypt(value, key):
    """
    Encrypts the data through a series of bit and character rotations
    :param value: String of characters to encrypt
    :param key: Key, must follow CS_proto
    :return: Encrypted Text
    """
    mb,rb,db = parsekey(key)
    if(len(value)%8 != 0):
        value = value.ljust(int(len(value)/8 + 1) * 8)
    l = 0
    result = []
    while(l < len(value)):
        cipher = []
        subvalue = value[l:l+8]
        for i in range(0,8):
            if(db[i%4]%2==1):
                cipher += [chr(rol(subvalue[i], rb[i%4]))]
            else:
                cipher += [chr(ror(subvalue[i], rb[i%4]))]
        if(mb%2==1):
            result += cipher[mb:len(cipher)]
            result += cipher[0:mb]
        else:
            result += cipher[len(cipher) - mb: len(cipher)]
            result += cipher[0:len(cipher) - mb]
        l += 8
    return result

def decrypt(value, key):
    """
    Decrypts the data through a series of bit and character rotations
    :param value: String of characters to encrypt
    :param key: Key, must follow CS_proto
    :return: Decrypted Text
    """
    mb,rb,db = parsekey(key)
    l = 0
    result = []
    while(l < len(value)):
        subvalue = value[l:l+8]
        cipher = []
        if (mb % 2 == 0):
            cipher += subvalue[mb:len(subvalue)]
            cipher += subvalue[0:mb]
        else:
            cipher += subvalue[len(subvalue) - mb: len(subvalue)]
            cipher += subvalue[0:len(subvalue) - mb]
        for i in range(0, 8):
            if (db[i%4]%2 == 0):
                result += [chr(rol(cipher[i], rb[i%4]))]
            else:
                result += [chr(ror(cipher[i], rb[i%4]))]
        l += 8
    return result

encrypted = "".join(encrypt('Passwords List : val, val, val', '32101111'))
decrypted = "".join(decrypt(encrypted, '32101111'))
print(encrypted)
print(decrypted)